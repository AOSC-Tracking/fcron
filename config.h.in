/*
 * FCRON - periodic command scheduler 
 *
 *  Copyright 2000-2001 Thibault Godouet <fcron@free.fr>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 *  The GNU General Public License can also be found in the file
 *  `LICENSE' that comes with the fcron source distribution.
 */

 /* $Id: config.h.in,v 1.27 2001-05-15 00:49:11 thib Exp $ */


/* *********************************************************** */
/* This file is destined to be edited to match your preference */
/* *********************************************************** */


/* ****************************************************************** */
/* beginning of configurable stuff ********************************** */


/* fcron allow and deny file are located in directory ETC (see below) */
#define FCRON_ALLOW      "fcron.allow"

#define FCRON_DENY       "fcron.deny"

#define SENDMAIL_ARGS	"-Ffcron", "-odi"   /* args of mail command */


/* *** memory *** */
#define EXE_INITIAL_SIZE 6 /* initial number of possible running job 
			    * if more jobs have to be run simultaneously,
			    * fcron will have to calloc() more memory */
#define EXE_GROW_SIZE 5 /* this is the number of entries that will be
			 * added to exe_array each time it has to grow
			 * up */

#define SERIAL_QUEUE_MAX 30 /* if serial queue contains this number of entries,
			     * the next serial job to be executed will be run
			     * non-serially each time a serial job is added */
#define SERIAL_INITIAL_SIZE 10 /* initial number of possible serial job. If
				* more jobs have to be in queue simultaneously,
				* fcron will have to calloc() more memory */
#define SERIAL_GROW_SIZE 10 /* this is the number of entries that will be
			     * added to serial queue each time it has to grow
			     * up */

#define LAVG_QUEUE_MAX 30 /* if lavg queue contains this number of entries,
			   * the next lavg job to be executed will be run
			   * before a new lavg job is added */
#define LAVG_INITIAL_SIZE 10 /* initial number of possible lavg job. If
			      * more jobs have to be in queue simultaneously,
			      * fcron will have to calloc() more memory */
#define LAVG_GROW_SIZE 10 /* this is the number of entries that will be
			   * added to lavg queue each time it has to grow
			   * up */


#define MAXENTRIES  256  /* max lines in non-root fcrontabs */

#define LINE_LEN    1024     /* max line length in user's config file */
#define FNAME_LEN 512        /* max length of a file name */
#define USER_NAME_LEN 128    /* max length of a user name */
#define PATH_LEN 256         /* max length of a file path */

#define MAX_MSG 150           /* max length of a log message */


/* *** time *** */
#define FIRST_SLEEP 20      /* fcron sleep at least this time after startup
			     * before executing a job, to avoid to run jobs
			     * during system boot */

#define LAVG_SLEEP 30 /* the time we sleep when some jobs are in lavg queue */

#define SAVE            1800  /* save every n seconds */

/* *** behavior *** */
#define SERIAL_ONCE 0 /* can a job be several times in the serial queue at
		       * the same moment ? */

#define LAVG_ONCE 1 /* can a job be several times in the lavg queue at
		     * the same moment ? */

#define MAXYEAR_SCHEDULE_TIME 10 /* a job can't be scheduled further than
                             * now + MAXYEAR_SCHEDULE years. This is used
                             * to prevent infinite loop on corrupted lines */

/* *** system dependent *** */
#define EXIT_ERR   1         /* code returned by fcron/fcrontab on error */
#define EXIT_OK    0         /* code returned  on normal exit */


/* Syslog facility and priorities messages will be logged to (see syslog(3)) */

/* NOTE : if you change anything here, check if the doc should not
          be updated
*/
#define SYSLOG_FACILITY LOG_CRON
#define EXPLAIN_LEVEL LOG_NOTICE  /* informational messages */
#define WARNING_LEVEL LOG_WARNING /* warning messages */
#define COMPLAIN_LEVEL LOG_ERR    /* error messages */
#define DEBUG_LEVEL LOG_DEBUG     /* only used when DEBUG is defined */


/* end of configurable stuff **************************************** */
/* ****************************************************************** */


/* ****************************************************************** */
/* *** options which are set by configure script ******************** */

/* The following should not be edited manually (use configure options)
 * If you must do it, BEWARE : some of the following is also defined
 * in the Makefile, so you must modify config.h AND Makefile in order
 * to set the same values in the two files. */

#undef VERSION_QUOTED

#undef CFLAGS

/* *** paths *** */
#undef ETC
#undef FCRONTABS
#undef SENDMAIL
#undef PROC
/* default editor */
#undef EDITOR
/* default shell */
#undef SHELL
/* where is located pid file ? */
#undef PIDFILE

#undef NOLOADAVG
/* 1 if you want debug mode */
#undef DEBUG
/* 1 if you want foreground mode by default */
#undef FOREGROUND

/* username to run under */
#undef USERNAME

/* groupname to run under */
#undef GROUPNAME

/* Define to empty if the keyword does not work.  */
#undef const

/* Define to `int' if <sys/types.h> doesn't define.  */
#undef gid_t

/* Define to `int' if <sys/types.h> doesn't define.  */
#undef pid_t

/* Define to `unsigned' if <sys/types.h> doesn't define.  */
#undef size_t

/* Define to `int' if <sys/types.h> doesn't define.  */
#undef uid_t

/* Define as the return type of signal handlers (int or void).  */
#undef RETSIGTYPE

/* Define if your struct nlist has an n_un member.  */
#undef NLIST_NAME_UNION

/* Define for DGUX with <sys/dg_sys_info.h>.  */
#undef DGUX

/* Define for Encore UMAX.  */
#undef UMAX

/* Define for Encore UMAX 4.3 that has <inq_status/cpustats.h>
   instead of <sys/cpustats.h>.  */
#undef UMAX4_3

/* Define on System V Release 4.  */
#undef SVR4

/* Define if your system has its own `getloadavg' function.  */
#undef HAVE_GETLOADAVG

/* Define if the `getloadavg' function needs to be run setuid or setgid.  */
#undef GETLOADAVG_PRIVILEGED

/* Define if you have the strftime function.  */
#undef HAVE_STRFTIME

/* Define if you have the wait3 system call.  */
#undef HAVE_WAIT3

/* Define if you have <nlist.h>.  */
#undef NLIST_STRUCT

/* Define if you have the getcwd function.  */
#undef HAVE_GETCWD

/* Define if you have the gethostname function.  */
#undef HAVE_GETHOSTNAME

/* Define if you have the gettimeofday function.  */
#undef HAVE_GETTIMEOFDAY

/* Define if you have the mkstemp function.  */
#undef HAVE_MKSTEMP

/* Define if you have the mktime function.  */
#undef HAVE_MKTIME

/* Define if you have the putenv function.  */
#undef HAVE_PUTENV

/* Define if you have the setenv function.  */
#undef HAVE_SETENV

/* Define if you have the setregid function.  */
#undef HAVE_SETREGID

/* Define if you have the setreuid function.  */
#undef HAVE_SETREUID

/* Define if you have the strerror function.  */
#undef HAVE_STRERROR

/* Define if you have the ANSI C header files.  */
#undef STDC_HEADERS

/* Define if you can safely include both <sys/time.h> and <time.h>.  */
#undef TIME_WITH_SYS_TIME

/* Define if your <sys/time.h> declares struct tm.  */
#undef TM_IN_SYS_TIME

/* Define if you have the <dirent.h> header file.  */
#undef HAVE_DIRENT_H

/* Define if you have the <errno.h> header file.  */
#undef HAVE_ERRNO_H

/* Define if you have the <fcntl.h> header file.  */
#undef HAVE_FCNTL_H

/* Define if you have the <getopt.h> header file.  */
#undef HAVE_GETOPT_H

/* Define if you have the <limits.h> header file.  */
#undef HAVE_LIMITS_H

/* Define if you have the <mach/mach.h> header file.  */
#undef HAVE_MACH_MACH_H

/* Define if you have the <ndir.h> header file.  */
#undef HAVE_NDIR_H

/* Define if you have the <stdarg.h> header file.  */
#undef HAVE_STDARG_H

/* Define if you have the <sys/dir.h> header file.  */
#undef HAVE_SYS_DIR_H

/* Define if you have the <sys/fcntl.h> header file.  */
#undef HAVE_SYS_FCNTL_H

/* Define if you have the <sys/file.h> header file.  */
#undef HAVE_SYS_FILE_H

/* Define if you have the <sys/ioctl.h> header file.  */
#undef HAVE_SYS_IOCTL_H

/* Define if you have the <sys/ndir.h> header file.  */
#undef HAVE_SYS_NDIR_H

/* Define if you have the <sys/time.h> header file.  */
#undef HAVE_SYS_TIME_H

/* Define if you have <sys/wait.h> that is POSIX.1 compatible.  */
#undef HAVE_SYS_WAIT_H

/* Define if you have the <syslog.h> header file.  */
#undef HAVE_SYSLOG_H

/* Define if you have the <unistd.h> header file.  */
#undef HAVE_UNISTD_H

/* Define if you have the dgc library (-ldgc).  */
#undef HAVE_LIBDGC
